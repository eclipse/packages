# Copyright (c) 2019 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
{{- if .Values.policies.enabled -}}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ditto.fullname" . }}-policies
  labels:
    app.kubernetes.io/name: {{ include "ditto.name" . }}-policies
{{ include "ditto.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.policies.replicaCount }}
  strategy:
  {{- with .Values.policies.updateStrategy }}
  {{- toYaml . | nindent 4 }}
  {{- end }}
  minReadySeconds: {{ .Values.policies.minReadySeconds }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "ditto.name" . }}-policies
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "ditto.name" . }}-policies
        app.kubernetes.io/instance: {{ .Release.Name }}
        actorSystemName: {{ .Values.akka.actorSystemName }}
        {{- with .Values.policies.additionalLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      annotations:
        {{- if .Values.global.prometheus.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/path: "{{ .Values.global.prometheus.path }}"
        prometheus.io/port: "{{ .Values.global.prometheus.port }}"
        {{- end }}
        checksum/mongodb-config: {{ include (print $.Template.BasePath "/mongodb-secret.yaml") . | sha256sum }}
        {{- with .Values.policies.additionalAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.rbac.enabled }}
      serviceAccountName: {{ template "ditto.serviceAccountName" . }}
      {{- end }}
      {{- with .Values.global.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        fsGroup: 1000
      {{- if .Values.global.logging.logFiles.enabled }}
      initContainers:
        - name: change-volume-owner
          image: busybox
          securityContext:
            runAsUser: 0
          command: [ "sh", "-c", "chown -R 1000:1000 /var/log/ditto && echo 'changed ownership of /var/log/ditto to 1000:1000'" ]
          volumeMounts:
            - name: ditto-log-files-directory
              mountPath: /var/log/ditto
      {{- end }}
      containers:
        - name: {{ .Chart.Name }}-policies
          image: {{ printf "%s:%s" .Values.policies.image.repository ( default .Chart.AppVersion ( default .Values.dittoTag .Values.policies.image.tag ) ) }}
          imagePullPolicy: {{ .Values.policies.image.pullPolicy }}
          env:
            - name: DITTO_LOGGING_DISABLE_SYSOUT_LOG
              value: "{{ if .Values.global.logging.sysout.enabled }}false{{ else }}true{{ end }}"
            - name: DITTO_LOGGING_FILE_APPENDER
              value: "{{ if .Values.global.logging.logFiles.enabled }}true{{ else }}false{{ end }}"
            {{- if .Values.global.logging.logstash.enabled }}
            - name: DITTO_LOGGING_LOGSTASH_SERVER
              value: "{{ .Values.global.logging.logstash.endpoint }}"
            {{- end }}
            - name: POD_LABEL_SELECTOR
              value: "app.kubernetes.io/name=%s"
            - name: POD_NAMESPACE
              value: {{.Release.Namespace}}
            - name: INSTANCE_INDEX
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.name
            - name: HOSTNAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: DISCOVERY_METHOD
              value: "kubernetes-api"
            - name: TZ
              value: "{{ .Values.global.timezone }}"
            - name: JAVA_TOOL_OPTIONS
              value: "{{ .Values.global.jvmOptions }} {{ .Values.policies.additionalJvmOptions }} {{ join " " .Values.policies.systemProps }}"
            - name: MONGO_DB_SSL_ENABLED
              value: "{{ if .Values.dbconfig.policies.ssl }}true{{ else }}false{{ end }}"
            - name: MONGO_DB_URI
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.dbconfig.uriSecret | default ( printf "%s-mongodb-secret" ( include "ditto.fullname" . )) }}
                  key: policies-uri
            {{- if .Values.global.prometheus.enabled }}
            - name: PROMETHEUS_PORT
              value: "{{ .Values.global.prometheus.port }}"
            {{- end }}
            {{- if .Values.policies.extraEnv }}
              {{- toYaml .Values.policies.extraEnv | nindent 12 }}
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: remoting
              containerPort: {{ .Values.akka.remoting.port }}
              protocol: TCP
            - name: management
              containerPort: {{ .Values.akka.mgmthttp.port }}
              protocol: TCP
            {{- if .Values.global.prometheus.enabled }}
            - name: prometheus
              protocol: TCP
              containerPort: 9095
            {{- end }}
          readinessProbe:
            httpGet:
              port: management
              path: /ready
            initialDelaySeconds: {{ .Values.policies.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.policies.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.policies.readinessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.policies.readinessProbe.failureThreshold }}
          livenessProbe:
            httpGet:
              port: management
              path: /alive
            initialDelaySeconds: {{ .Values.policies.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.policies.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.policies.livenessProbe.timeoutSeconds }}
            failureThreshold: {{ .Values.policies.livenessProbe.failureThreshold }}
          {{- if .Values.global.logging.logFiles.enabled }}
          volumeMounts:
            - name: ditto-log-files-directory
              mountPath: /var/log/ditto
          {{- end }}
          resources:
            {{- toYaml .Values.policies.resources | nindent 12 }}
          {{- if .Values.openshift.enabled }}
          {{- with .Values.openshift.securityContext }}
          securityContext:
            {{- toYaml . | nindent 8 }}
          {{- end }}
          {{- else }}
          securityContext:
            runAsNonRoot: true
            runAsUser: 1000
            runAsGroup: 1000
            allowPrivilegeEscalation: false
          {{- end }}
      {{- with .Values.policies.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.policies.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.policies.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if .Values.global.logging.logFiles.enabled }}
      volumes:
        - name: ditto-log-files-directory
          hostPath:
            path: /var/log/ditto
            type: DirectoryOrCreate
      {{- end }}
{{- end }}
