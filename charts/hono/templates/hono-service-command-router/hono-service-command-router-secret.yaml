{{- if and .Values.useCommandRouter .Values.commandRouterService.enabled }}
#
# Copyright (c) 2021 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
{{- $args := dict "dot" . "component" "service-command-router" "name" "service-command-router-conf" }}
apiVersion: v1
kind: Secret
metadata:
  {{- include "hono.metadata" $args | nindent 2 }}
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: {{ .Values.commandRouterService.hono.app.maxInstances }}
        startupTimeout: {{ .Values.commandRouterService.hono.app.startupTimeout }}
      auth:
        {{- if .Values.commandRouterService.hono.auth }}
        {{- .Values.commandRouterService.hono.auth | toYaml | nindent 8 }}
        {{- else }}
        host: {{ printf "%s-service-auth" .Release.Name | quote }}
        port: 5671
        trustStorePath: "/etc/hono/trusted-certs.pem"
        hostnameVerificationRequired: false
        name: {{ printf "Hono %s" $args.component | quote }}
        validation:
          certPath: "/etc/hono/auth-server-cert.pem"
        {{- end }}
      commandRouter:
        amqp:
          {{- if .Values.commandRouterService.hono.commandRouter.amqp }}
          {{- .Values.commandRouterService.hono.commandRouter.amqp | toYaml | nindent 10 }}
          {{- else }}
          bindAddress: "0.0.0.0"
          keyPath: "/etc/hono/key.pem"
          certPath: "/etc/hono/cert.pem"
          {{- end }}
        cache:
          {{- if .Values.dataGridSpec }}
          remote:
            {{- .Values.dataGridSpec | toYaml | nindent 12 }}
          {{- else if .Values.dataGridExample.enabled }}
          remote:
            {{- $serverName := printf "%s-data-grid" .Release.Name }}
            serverList: {{ printf "%s:11222" $serverName | quote }}
            authServerName: {{ $serverName | quote }}
            authUsername: {{ .Values.dataGridExample.authUsername | quote }}
            authPassword: {{ .Values.dataGridExample.authPassword | quote }}
            authRealm: "ApplicationRealm"
            saslMechanism: "DIGEST-MD5"
            socketTimeout: 5000
            connectTimeout: 5000
          {{- end }}
      registration:
      {{- if .Values.deviceRegistryExample.enabled }}
        name: {{ printf "Hono %s" $args.component | quote }}
        host: {{ .Release.Name }}-service-device-registry
        port: 5671
        credentialsPath: /etc/hono/adapter.credentials
        trustStorePath: /etc/hono/trusted-certs.pem
        hostnameVerificationRequired: false
      {{- else }}
        {{- required ".Values.adapters.deviceRegistrationSpec MUST be set if example Device Registry is disabled" .Values.adapters.deviceRegistrationSpec | toYaml | nindent 8 }}
      {{- end }}
      command:
      {{- if .Values.amqpMessagingNetworkExample.enabled }}
        name: {{ printf "Hono %s" $args.component | quote }}
        amqpHostname: hono-internal
        host: {{ .Release.Name }}-dispatch-router
        port: 5673
        keyPath: {{ .Values.adapters.commandAndControlSpec.keyPath }}
        certPath: {{ .Values.adapters.commandAndControlSpec.certPath }}
        trustStorePath: {{ .Values.adapters.commandAndControlSpec.trustStorePath }}
        hostnameVerificationRequired: {{ .Values.adapters.commandAndControlSpec.hostnameVerificationRequired }}
      {{- else }}
        {{- required ".Values.adapters.commandAndControlSpec MUST be set if example AQMP Messaging Network is disabled" .Values.adapters.commandAndControlSpec | toYaml | nindent 8 }}
      {{- end }}
      {{- include "hono.healthServerConfig" .Values.commandRouterService.hono.healthCheck | nindent 6 }}
data:
  key.pem: {{ .Files.Get "example/certs/command-router-key.pem" | b64enc }}
  cert.pem: {{ .Files.Get "example/certs/command-router-cert.pem" | b64enc }}
  trusted-certs.pem: {{ .Files.Get "example/certs/trusted-certs.pem" | b64enc }}
  auth-server-cert.pem: {{ .Files.Get "example/certs/auth-server-cert.pem" | b64enc }}
  adapter.credentials: {{ .Files.Get "example/command-router.credentials" | b64enc }}
{{- end }}
