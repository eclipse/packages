{{- if and .Values.deviceRegistryExample.enabled ( eq .Values.deviceRegistryExample.type "jdbc" ) }}
#
# Copyright (c) 2020, 2022 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0
#
# SPDX-License-Identifier: EPL-2.0
#
{{- $args := dict "dot" . "component" "service-device-registry" "name" "service-device-registry-conf" }}
apiVersion: v1
kind: Secret
metadata:
  {{- include "hono.metadata" $args | nindent 2 }}
type: Opaque
stringData:
  application.yml: |
    hono:
      app:
        maxInstances: 1
      auth:
        {{- if .Values.deviceRegistryExample.hono.auth }}
        {{- .Values.deviceRegistryExample.hono.auth | toYaml | nindent 8 }}
        {{- else }}
        host: {{ printf "%s-service-auth" .Release.Name | quote }}
        port: 5671
        trustStorePath: "/opt/hono/tls/ca.crt"
        hostnameVerificationRequired: false
        name: {{ printf "Hono %s" $args.component | quote }}
        supportedSaslMechanisms: "PLAIN"
        connectTimeout: 2000
        {{- end }}
      registry:
        amqp:
          {{- if .Values.deviceRegistryExample.hono.registry.amqp }}
          {{- .Values.deviceRegistryExample.hono.registry.amqp | toYaml | nindent 10 }}
          {{- else }}
          bindAddress: "0.0.0.0"
          keyPath: "/opt/hono/tls/tls.key"
          certPath: "/opt/hono/tls/tls.crt"
          {{- end }}
        http:
          {{- if .Values.deviceRegistryExample.hono.registry.http }}
          {{- .Values.deviceRegistryExample.hono.registry.http | toYaml | nindent 10 }}
          {{- else }}
          authenticationRequired: false
          bindAddress: "0.0.0.0"
          keyPath: "/opt/hono/tls/tls.key"
          certPath: "/opt/hono/tls/tls.crt"
          insecurePortEnabled: true
          insecurePortBindAddress: "0.0.0.0"
          {{- end }}
          deviceIdPattern: "^[a-zA-Z0-9-_\\.\\:]+$"
        {{- if .Values.deviceRegistryExample.hono.registry.svc }}
        svc:
          {{- .Values.deviceRegistryExample.hono.registry.svc | toYaml | nindent 10 }}
        {{- end }}
        jdbc:
          {{- if .Values.deviceRegistryExample.jdbcBasedDeviceRegistry.registry.jdbc }}
          {{- .Values.deviceRegistryExample.jdbcBasedDeviceRegistry.registry.jdbc | toYaml | nindent 10 }}
          {{- end }}
      tenant:
        jdbc:
          {{- if .Values.deviceRegistryExample.jdbcBasedDeviceRegistry.tenant.jdbc }}
          {{- .Values.deviceRegistryExample.jdbcBasedDeviceRegistry.tenant.jdbc | toYaml | nindent 10 }}
          {{- end }}
      {{- include "hono.messagingNetworkClientConfig" ( dict "dot" . "component" $args.component "kafkaMessagingSpec" .Values.deviceRegistryExample.hono.kafka ) | nindent 6 }}
    {{- include "hono.quarkusConfig" $args | indent 4 }}
{{- end }}
